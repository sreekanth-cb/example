// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package sample

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE242b40eDecodeGithubComExampleSample(in *jlexer.Lexer, out *Social) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "handle":
			out.Handle = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE242b40eEncodeGithubComExampleSample(out *jwriter.Writer, in Social) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"handle\":")
	out.String(string(in.Handle))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Social) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE242b40eEncodeGithubComExampleSample(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Social) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE242b40eEncodeGithubComExampleSample(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Social) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE242b40eDecodeGithubComExampleSample(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Social) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE242b40eDecodeGithubComExampleSample(l, v)
}
func easyjsonE242b40eDecodeGithubComExampleSample1(in *jlexer.Lexer, out *MediumPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "person":
			if in.IsNull() {
				in.Skip()
				out.Person = nil
			} else {
				if out.Person == nil {
					out.Person = new(CBPerson)
				}
				(*out.Person).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE242b40eEncodeGithubComExampleSample1(out *jwriter.Writer, in MediumPayload) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"person\":")
	if in.Person == nil {
		out.RawString("null")
	} else {
		(*in.Person).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MediumPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE242b40eEncodeGithubComExampleSample1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MediumPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE242b40eEncodeGithubComExampleSample1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MediumPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE242b40eDecodeGithubComExampleSample1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MediumPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE242b40eDecodeGithubComExampleSample1(l, v)
}
func easyjsonE242b40eDecodeGithubComExampleSample2(in *jlexer.Lexer, out *CBPerson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "linkedin":
			if in.IsNull() {
				in.Skip()
				out.LinkedIn = nil
			} else {
				if out.LinkedIn == nil {
					out.LinkedIn = new(Social)
				}
				(*out.LinkedIn).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE242b40eEncodeGithubComExampleSample2(out *jwriter.Writer, in CBPerson) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"linkedin\":")
	if in.LinkedIn == nil {
		out.RawString("null")
	} else {
		(*in.LinkedIn).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CBPerson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE242b40eEncodeGithubComExampleSample2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CBPerson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE242b40eEncodeGithubComExampleSample2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CBPerson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE242b40eDecodeGithubComExampleSample2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CBPerson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE242b40eDecodeGithubComExampleSample2(l, v)
}
